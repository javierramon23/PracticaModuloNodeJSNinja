#!/usr/bin/env node

/**
 * Se cargan los MODULOS necesarios para el fichero.
 */
var app = require('../app');
var debug = require('debug')('nodepop:server');
var http = require('http');

/**
 * Se define un PUERTO de ESCUCHA para la APP.
 * y se establece como PUERTO PREDETERMINADO.
 */
// Se selecciona el puerto que utilizará la APP.
// Si existe un puerto definido como una VARIABLE de ENTORNO se selecciona ese...
// Si no existe se selecciona el puerto 3000.
var port = normalizePort(process.env.PORT || '3000');
// Se establece el puerto.
app.set('port', port);

/**
 * Se crea un SERVIDOR que ejecute la APP.
 */
var server = http.createServer(app);

/**
 * Se inicia la ESCUCHA de PETICIONES al SERVIDOR por el PUERTO DEFINIDO.
 */
server.listen(port);
/**
 * El servidor se SUSCRIBE a unos EVENTOS a los que deberá RESPONDER, 'error' y 'listening'.
 */
// Si se produce el EVENTO 'error', se ejecuta la FUNCION o EVENT LISTENER 'onError'.
server.on('error', onError);
// Si se produce el EVENTO 'listening', se ejecuta la FUNCION o EVENT LISTENER 'onListening'.
server.on('listening', onListening);

/**
 * se NORMALIZA el PUERTO que utilizará la APP para 'asegurar' el valor introducido.
 */
function normalizePort(val) {
  // Se transforma el STRING en un valor ENTEROde BASE 10.
  var port = parseInt(val, 10);

  // Si una vez transformado NO es un NUMERO...
  if (isNaN(port)) {
    // Se retorna el STRING.
    return val;
  }
  // Si es un ENTERO mayor que 0
  if (port >= 0) {
    // Se devuelve ese nuemro de puerto.
    return port;
  }
  // Si no se cumple ninguna de las ANTERIORES...
  // es un PUERTO no vallido.
  return false;
}

/**
 * MANEJADOR del EVENTO 'error' 'onError':
 * Se encarga de manejar los posibles errores que se produzcan a la hora
 * de poner en marcha el SERVIDOR.
 */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * MANEJADOR del EVENTO 'listenig' 'onListening':
 * Define una nueva línea en el LOG con información del SERVIDOR.
 */
function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind + ' (env: ' + app.get('env') + ')');
}

